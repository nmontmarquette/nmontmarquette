<?xml version="1.0" encoding="UTF-8"?>
<projects>
    <project>
        <name>"Libre!"</name>
        <years>2022-2023</years>
        <employer>Spiria</employer>
        <tasks>
            <task>
                <description>Convertir le logiciel d'un client en logiciel libre incluant la mise à jour de vieilles librairies.</description>
            </task>
            <task>
                <description>Création d'un outil pour lire et convertir les centaines de fichiers Makefile en CMake avec visualisation de l'arbre de dépendance question d’estimer le pourcentage du travail fait.</description>
            </task>
            <task>
                <description>Débogage de différents problèmes dus à la conversion et mises à jour de librairies.</description>
            </task>
        </tasks>
        <technologies>
            <technology>C/C++</technology>
            <technology>Make</technology>
            <technology>CMake</technology>
            <technology>Python</technology>
            <technology>Jenkins</technology>
            <technology>Github Actions</technology>
        </technologies>
        <links>
            <link>À venir en janvier 2023!</link>
        </links>
    </project>
    <project>
        <name>"Big Toys"</name>
        <years>2022-2022</years>
        <employer>Spiria</employer>
        <tasks>
            <task>
                <description>Correction de divers bogues dans un système embarqué temps réel.</description>
            </task>
            <task>
                <description>Documentation de différents procédés non documentés.</description>
            </task>
        </tasks>
        <technologies>
            <technology>C/C++</technology>
            <technology>Linux</technology>
            <technology>bash</technology>
            <technology>Docker</technology>
            <technology>GDB</technology>
            <technology>Python</technology>
        </technologies>
    </project>
    <project>
        <name>"Digital Asset Manager"</name>
        <years>2022-2022</years>
        <employer>Spiria</employer>
        <tasks>
            <task>
                <description>Prototypage en Python de l'application de gestion de ressources numériques.</description>
            </task>
            <task>
                <description>Prototypage d'un resolver USD en C++ avec "bindinds" Python.</description>
            </task>
            <task>
                <description>Refonte du prototype de l'application en langage Go.</description>
            </task>
            <task>
                <description>Implanter les ressources CI/CD sur Jenkins et Github Actions.</description>
            </task>
            <task>
                <description>Instrumentation des performances des services distants (TypeScript).</description>
            </task>
        </tasks>
        <technologies>
            <technology>C/C++</technology>
            <technology>Entity Component System (ECS)</technology>
            <technology>Standard USD (Pixart)</technology>
            <technology>Forge Data</technology>
            <technology>bash</technology>
            <technology>Python</technology>
            <technology>TypeScript</technology>
            <technology>Go (Google)</technology>
            <technology>CMake</technology>
            <technology>Jenkins</technology>
            <technology>Github Actions</technology>
        </technologies>
        <details>
            Ayant bonne réputation auprès de ce client, le responsable de ce projet a spécifiquement demandé mes services à mon employeur Spiria.

            Dans une seconde itération du projet, nous devions convertir le code de la première itération en langage Go. C'était là, une belle opportunité de faire mes premières armes en Go.

            L'architecte du projet était très ouvert à mes suggestions. À la fin du quart, au final, l'architecte m'a publiquement félicité pour le travail accompli. Son équipe avait paru particulièrement bien préparée au moment de partager les conclusions au niveau supérieur de la direction. D'autres équipes, elles, n'avaient plutôt que ouï-dire et supposition. Notre équipe, arrivait avec graphiques détailler documentent de réels cas d'usage.
        </details>
    </project>
    <project>
        <name>"Set-up box"</name>
        <years>2016-2016</years>
        <employer>Innobec (Spiria)</employer>
        <tasks>
            <task>
                <description>Intégrer les changements du manufacturier conçu pour un noyau Linux plus récent dans un noyau Linux un peu plus vieux.</description>
                <technologies>
                    <technology>C, noyau Linux</technology>
                </technologies>
            </task>
            <task>
                <description>Établir la faisabilité d'une mise à jour automatique.</description>
                <technologies>
                    <technology>C, noyau Linux</technology>
                    <technology>Android (bas niveau)</technology>
                </technologies>
            </task>
            <task>
                <description>Instrumenter et qualifier les performances des appareils existants avant et après les correctifs au pilote d'écriture Flash.</description>
                <technologies>
                    <technology>Python (DJango)</technology>
                    <technology>pfSense</technology>
                    <technology>Réseautique générale</technology>
                </technologies>
            </task>
            <task>
                <description>Conception, assemblage et filage d'un système de test automatisé impliquant plus d'une centaine d'appareils.</description>
            </task>
            <task>
                <description>Conception d'un système automatisé de captures des statistiques de fiabilité.</description>
            </task>
        </tasks>
        <technologies>
            <technology>Android (bas niveau)</technology>
            <technology>C, noyau Linux</technology>
            <technology>Python (DJango)</technology>
            <technology>pfSense</technology>
            <technology>Réseautique générale</technology>
        </technologies>
        <details>
            Le client avait lecteur multimédia dédié, communément appelé "set-up box", roulant une version d'Android avec un processeur Rockchip.
            Le lecteur étant particulièrement bas de gamme, le média de stockage n'avait pas de contrôleur dédié, mais un pilote dans le noyau de Linux. Cette combinaison serait acceptable si l’on ne devait pas composer avec de fréquentes coupures d'alimentation. Puisque toutes les opérations bas niveau se passaient toutes dans le noyau Linux plutôt que dans un contrôleur dédié, les risques de corruption de donnée s’en trouvaient fortement augmentés, causant fréquemment l'impossibilité aux appareils de redémarrer. Un technicien devait ultimement se rendre en personne pour remplacer l'appareil ou faire quelques manipulations au site d'installation.

            Rockchip, le manufacturier, avait quelques correctifs possibles pour un noyau plus récent, ces correctifs forçaient les écritures plus rapidement (au pris d'un peu moins de performance) mais diminuaient les risques de corruption de donnée. Le client nous a contactés afin que nous nous:
            a) Déterminions si oui ou non le correctif du manufacturier améliorait réellement la situation b) faisions l'évaluation si une mise à jour automatiquement était possible nécessitant un remplacement complet de l'image Flash.

            Un des sous mandats était de quantifier et d'instrumenter si les correctifs amélioraient la stabilité avant un déploiement massif. Avec l'accord du client et plusieurs milliers de dollars d'achats, j'ai monté une armoire mobile sur lequel on trouvait plus d’une centaine de ces appareils ainsi que tout le nécessaire:  3 UPS, 4 barres d'alimentation intelligentes, 5 concentrateurs 24 ports, beaucoup de câbles réseaux et une machine sur laquelle tournait un portail Django, et un portail pfSense,

            J'avais 60 appareils avec le correctif et 60 autres sans le correctif. Un ordinateur additionnel vérifiait la présence des appareils sur le réseau improvisé et simulait une panne abrupte via les barres d'alimentation intelligentes. Un portail simple Django enregistrait en temps réel les tentatives de connexion de chacun des appareils. Finalement, notre portail pfSense nous permettait un contrôle total sans importuner le réseau local de la compagnie.

            Dans ce projet, j’ai pu familiariser avec le processus de compiler un noyau Linux complet, l'intégrer à une image Android elle aussi construite au complet. En plus de poursuivre mon apprentissage de DJango, j’ai pu découvrir pfSense que j’utilise à la maison depuis ce projet là.
        </details>
    </project>
    <project>
        <name>Lithium</name>
        <years>2015-2016</years>
        <employer>Innobec (Spiria)</employer>
        <tasks>
            <task>
                <description>Intégration de nouveau scanneur Bluetooth dans les versions iOS, Android ainsi que Windows Phone.</description>
                <technologies>
                    <technology>C++ (Windows RT)</technology>
                    <technology>Java (Android)</technology>
                    <technology>Objective-C (iOS)</technology>
                    <technology>Bluetooth</technology>
                </technologies>
            </task>
            <task>
                <description>Mise à jour et refonte complète des dizaines de dépendances que nous avions.</description>
                <technologies>
                    <technology>C/C++</technology>
                    <technology>Make</technology>
                    <technology>CMake</technology>
                </technologies>
            </task>
            <task>
                <description>Implémenter une version Windows RT de notre application existante.</description>
                <technologies>
                    <technology>C/C++</technology>
                    <technology>Windows RT</technology>
                </technologies>
            </task>
        </tasks>
        <technologies>
            <technology>C/C++</technology>
            <technology>Java (Android)</technology>
            <technology>Objective-C (iOS)</technology>
            <technology>Windows RT</technology>
            <technology>Make, CMake</technology>
            <technology>Bluetooth</technology>
        </technologies>
        <details>
            En tant que membre d'une équipe de 6 développeurs, ce projet maison avait pour but d'intégrer de nouveau scanner Bluetooth ainsi que support de caméra pour notre application maison multi-plateformes.

            Plus tard, nous avons aussi eu le feu vert du client pour ajouter le nouvel arrivé dans le monde du mobile: Windows Phone et l'API Windows RT.
        </details>
        <links>
            <link>https://www.spiria.com/en/blog/iot-m2m-embedded-solutions/i-kabin-what-adventure/</link>
        </links>
    </project>
    <project>
        <name>iKabin</name>
        <years>2014-2015</years>
        <employer>Innobec (Spiria)</employer>
        <tasks>
            <task>
                <description>Implémentation générale (bash + Python) des fonctionnalités du système.</description>
                <technologies>
                    <technology>Python</technology>
                    <technology>bash</technology>
                    <technology>Linux</technology>
                    <technology>Modem cellulaire</technology>
                    <technology>Contrôleur de charge solaire (Solentro)</technology>
                </technologies>
            </task>
            <task>
                <description>Implémentation prototype du portail Web (Django).</description>
                <technologies>
                    <technology>Django (Python)</technology>
                </technologies>
            </task>
            <task>
                <description>Population et débogage des cartes du système.</description>
            </task>
            <task>
                <description>Assemblage et filage complet des kiosques prototypes.</description>
            </task>
        </tasks>
        <technologies>
            <technology>Python</technology>
            <technology>Linux</technology>
            <technology>bash</technology>
            <technology>Cartes Olimex</technology>
            <technology>Django (Python)</technology>
            <technology>Modem cellulaire</technology>
            <technology>Contrôleur de charge solaire (Solentro)</technology>
        </technologies>
        <details>
            Ce projet consistait à concevoir et réaliser des prototypes de kiosques de recharge solaire autonome pour des villages sans électricité en Afrique. Bien qu'ils n'aient pas d'électricité, tous les gens ont au moins 2 téléphones cellulaires. Leurs téléphones sont ce qui leur permet de rester en contact avec le reste du monde ainsi que surtout fait office de système de paiement personnel. C'est pourquoi ces kiosques leur permettent de recharger leurs appareils sans avoir à faire 2 heures de route pour se rendre "en-ville".

            C'était mon premier projet chez Spiria. Je découvrais Python ainsi que le "framework" Django, je faisais de la soudure, déboguais les cartes du système, faisais de l'assemblage, du débogage de Python, du débogage de transactions dans la base de données, colligeais des données statistiques pour diagnostiqué la raison des pannes. C'était une des premières fois que je devais utiliser Linux à fond, qu'en ligne de commande.
        </details>
        <links>
            <link>https://www.spiria.com/en/blog/iot-m2m-embedded-solutions/i-kabin-what-adventure/</link>
        </links>
    </project>
    <project>
        <name>T.P.S.</name>
        <years>2012-2014</years>
        <employer>Thought Technology</employer>
        <tasks>
            <task>
                <description>Conception du micrologiciel principal, utilisation de configurations dynamiques (PSoC).</description>
                <technologies>
                    <technology>C</technology>
                    <technology>Spécification matérielle de Bluetooth</technology>
                    <technology>Cypress PSoC</technology>
                    <technology>Configuration dynamique (PSoC)</technology>
                </technologies>
            </task>
            <task>
                <description>Conception d'applications de démonstration ainsi que librairies multi-platforme ainsi que des outil maison permettant de compiler certaines librairies pour les plateformes Windows, iOS et Android, à partir du même code source.</description>
                <technologies>
                    <technology>C++, COM (Windows)</technology>
                    <technology>Java (Android)</technology>
                    <technology>Objective-C (iOS)</technology>
                    <technology>Compilation multi-plateformes</technology>
                </technologies>
            </task>
            <task>
                <description>Conception banc de test complet et outils interne en soutien au département de production.</description>
                <technologies>
                    <technology>C++</technology>
                    <technology>COM</technology>
                    <technology>National Instrument LabView</technology>
                </technologies>
            </task>
            <task>
                <description>Documentation détaillée du micrologiciel (plus de 200 pages).</description>
                <technologies>
                    <technology>Doxygen</technology>
                </technologies>
            </task>
        </tasks>
        <technologies>
            <technology>C (Cypress PSoC)</technology>
            <technology>C++, COM, COM+, (Windows)</technology>
            <technology>Java (Android)</technology>
            <technology>Objective-C (iOS)</technology>
            <technology>LabView (National Instrument)</technology>
            <technology>Doxygen</technology>
            <technology>Spécifications Bluetooth</technology>
        </technologies>
        <details>
            Dans ce projet, les requis n'ont cessé de s'ajouter et il n'était pas possible dans ce cas ci d'utiliser une autre version avec plus de RAM ou d'espace Flash. Il devenait très difficile d'ajouter quoi que ce soit dans ce micrologiciel tant il était dense. À tout moment, je n'avais guère plus qu'une dizaine d'octets libre en Flash, je devais constamment trouvé comment rendre le code plus compact. En ce qui concerne la RAM, là aussi je n'avais en moyenne que 4-6 octets de libre avant d'exploser la pile.

            Pour ce projet j'ai aussi dû optimiser le code purement pour économiser des microampères. C'était nécessaire pour étirer la durée de vie d’entreposage des appareils puisque la pile n'était pas facilement accessible et nous ne désirions pas avoir à recharger l'ensemble des appareils tous les N mois.

            J'ai développé des outils permettant de compiler certaines librairies pour les plateformes Windows, iOS et Android, à partir du même code source en faisant usage des ressemblances des langages C++, Java et Objective-C tout en limitant l'usage des spécificités moins portable.

            Le micrologiciel était si dense, que ma documentation interne faisait près de 200 pages.
        </details>
        <links>
            <link>https://www.youtube.com/watch?v=4z4j70gOBjQ</link>
            <link>https://thoughttechnology.com/evu-tps-package-t4500</link>
        </links>
    </project>
    <project>
        <name>Tele-Infiniti</name>
        <years>2009-2012</years>
        <employer>Thought Technology</employer>
        <tasks>
            <task>
                <description>Conception de fonctionnalité sans fil Tele-Infiniti pour appareils d'acquisition existants.</description>
                <technologies>
                    <technology>C</technology>
                    <technology>Spécification matérielle de Bluetooth</technology>
                    <technology>Protocole USB bas-niveau (HCI)</technology>
                    <technology>Procédure de soumission matériel auprès d'Apple</technology>
                </technologies>
            </task>
            <task>
                <description>Conception de nouvelles librairies et pilotes pour Windows.</description>
                <technologies>
                    <technology>Débogage de "kernel drivers</technology>
                    <technology>Transfert USB "bulk" et "Isochronous"</technology>
                    <technology>C++, Win32, Windows DDK, WDK (pilote)</technology>
                    <technology>Procédure d'obtention d'un certificat officiel</technology>
                    <technology>Procédure de signature auprès de Microsoft</technology>
                </technologies>
            </task>
            <task>
                <description>Conception de prototype d'applications et librairies pour plateformes mobiles.</description>
                <technologies>
                    <technology>C++, Objective-C, Java</technology>
                    <technology>Android, iOS</technology>
                    <technology>Procédure de soumission d'application au App-Store d'Apple</technology>
                    <technology>Procédure de soumission matériel auprès d'Apple</technology>
                </technologies>
            </task>
            <task>
                <description>Banc de test complet automatisé (avec brouilleur multibande) pour instrumenter le débit ainsi que la fiabilité.</description>
                <technologies>
                    <technology>C++</technology>
                    <technology>COM</technology>
                    <technology>National Instrument LabView</technology>
                </technologies>
            </task>
            <task>
                <description>Établir la procédure d'obtention d'un certificat officiel auprès de Microsoft et Apple.</description>
            </task>
            <task>
                <description>Établir la procédure de signature de pilote auprès de Microsoft.</description>
            </task>
            <task>
                <description>Établir la procédure de signature d'application auprès d'Apple.</description>
            </task>
            <task>
                <description>Établir la procédure de soumission matériel auprès d'Apple.</description>
            </task>
        </tasks>
        <technologies_short>C/C++, Objective-C, Java, Kernel driver, Win32, DDK, WDK, HCI (USB), Android, iOS</technologies_short>
        <technologies>
            <technology>C/C++, Objective-C, Java</technology>
            <technology>Débogage de "kernel drivers (Windows)</technology>
            <technology>Protocole USB bas-niveau (HCI)</technology>
            <technology>Transfert USB "bulk" et "Isochronous"</technology>
            <technology>Win32, Windows DDK, WDK (pilote)</technology>
            <technology>Android, iOS</technology>
        </technologies>
        <details>
            Le module 'Tele-Infiniti' était essentiellement un greffon sans fil (Bluetooth) pour notre gamme de produits d'acquisitions.

            Nous avons contacté plusieurs manufacturiers, assemblé et testé de nombreux prototypes, au final qu'un seul module offrait le débit nécessaire en CLASSA 1 (environ 100m).

            Le micrologiciel principal ayant presque atteint son maximum (sans avoir à changer de microcontrôleur) ainsi que le peu de RAM, nous ne pouvions pas utiliser un "stack" Bluetooth existant. Nous devions utiliser la couche HCI directement, nous forçait donc à écrire notre propre pilote pour Windows puisque le pilote Bluetooth standard ne recevrait pas les échanges nécessaires.

            Durant cette période, l'iPhone faisait son apparition, j'ai donc exploré et prototypé avec les plateformes Apple et Android.

            Pour ce projet, spécifiquement, j'ai travaillé avec la NASA ainsi que la compagnie CSR (manufacturier de puces Bluetooth). La NASA, nous ayant commandé plusieurs systèmes d'acquisition. Durant leurs tests a été découvert un bogue très occasionnel sur lequel nous devions travailler. Ainsi, environ, une fois par 24 millions de paquets il y avait conflit entre deux récepteurs Bluetooth brisant trame causant des artefacts dans les données capturées.
        </details>
        <links>
            <link>https://thoughttechnology.com/tele-infiniti-compact-flash-t9600/</link>
        </links>
    </project>
    <project>
        <name>FlexComp Infiniti</name>
        <years>2000-2009</years>
        <employer>Thought Technology</employer>
        <tasks>
            <task>
                <description>Conception et implémentation de micrologiciels.</description>
                <technologies>
                    <technology>C, Assembleur (Intel)</technology>
                    <technology>Microcontrôleurs Atmel, Intel, Qualcomm (SnapDragon)</technology>
                    <technology>Compilateur IAR</technology>
                </technologies>
            </task>
            <task>
                <description>Conception d'un API pour Windows utilisant les technologies COM.</description>
                <technologies>
                    <technology>C++</technology>
                    <technology>Win32, COM, COM+</technology>
                    <technology>Pocket PC, Windows CE, Palm OS</technology>
                </technologies>
            </task>
            <task>
                <description>Conception et documentation d'un kit du développeur (SDK) incluant un guide de plus 120 pages.</description>
                <technologies>
                    <technology>C/C++</technology>
                    <technology>Win32, COM, COM+, .NET, VBA</technology>
                    <technology>National Instrument LabView</technology>
                    <technology>MatLab</technology>
                </technologies>
            </task>
            <task>
                <description>Banc de test complet pour la production ainsi que débogage des unités produites.</description>
                <technologies>
                    <technology>C++</technology>
                    <technology>COM</technology>
                    <technology>National Instrument LabView</technology>
                </technologies>
            </task>
        </tasks>
        <technologies>
            <technology>C, Assembleur (Intel)</technology>
            <technology>Microcontrôleurs Atmel, Intel, Qualcomm (SnapDragon)</technology>
            <technology>Compilateur IAR</technology>
            <technology>C++, Win32, COM, COM+, .NET, VBA (Windows)</technology>
            <technology>Pocket PC, Windows CE, Palm OS</technology>
            <technology>LabView (National Instrument)</technology>
            <technology>MatLab (Mathworks)</technology>
        </technologies>
        <details>
            Notre interface USB maison représentait un certain défi d'optimisation. En effet, il n'y avait que peu de cycle disponible par transaction USB. Bien que ça augmentait le coût, j'ai dû suggérer une variante où la plupart des instructions prenaient 6 cycles machines plutôt que le 12 avec la version de base du microcontrôleur, nous permettant de descendre sous la barre des 100% avec une utilisation processeur de 95-98 %

            Le travail impliquait aussi beaucoup d'outils et de code nécessaires aux testages et débogage des unités produites par notre département de production.

            Finalement, pour permettre aux développeurs d'applications d'utiliser nos appareils, nous fournissions SDK complet permettant de communiquer avec tous nos appareils via un API unique. J'ai eu bonne implication dans le design ainsi que toute implémentation de l'API, de sa documentation et multiples exemples en différents langages. Je balançais donc entre le code micrologiciel et le code WIN32 sur une base régulière.
        </details>
        <links>
            <link>https://thoughttechnology.com/flexcomp-system-with-biograph-infiniti-software-t7555m</link>
        </links>
    </project>
    <project>
        <name>Machinerie</name>
        <years>1997-2000</years>
        <employer>Weighpack / Paxiom</employer>
        <tasks>
            <task>
                <description>Maintenance améliorations de micrologiciel contrôlant de l'équipement industriel d'emballage.</description>
                <technologies>
                    <technology>C, Assembleur (Zilog)</technology>
                    <technology>Microcontrôleurs industriels Zilog</technology>
                </technologies>
            </task>
            <task>
                <description>Conception d'émulateurs machine afin d'accélérer le testage et le développement des requêtes clients.</description>
                <technologies>
                    <technology>C++</technology>
                </technologies>
            </task>
            <task>
                <description>Conception d'une application de contrôle à distance.</description>
                <technologies>
                    <technology>C++</technology>
                    <technology>Win32, Delphi, Windows</technology>
                </technologies>
            </task>
        </tasks>
        <technologies>
            <technology>C, C++</technology>
            <technology>Assembleur (Zilog)</technology>
            <technology>Microcontrôleurs industriels Zilog</technology>
            <technology>Win32, Delphi, Windows</technology>
        </technologies>
        <details>
            J'étais particulière fier de ma contribution d'émulateurs machines, avant mon passage le cycle de
            développement nécessitait de constant aller-retour en production pour vérifier le fonctionnement général.
            Grâce à mes émulateurs, on arrivait à vérifier 85-90% du fonctionnement à même notre poste de travail.
            Dans majorité des cas, nous n'allions en production que pour constater que tout fonctionnait correctement.
        </details>
        <links>
            <link>https://www.weighpack.com/about-weighpack-packaging-machines/</link>
        </links>
    </project>
</projects>